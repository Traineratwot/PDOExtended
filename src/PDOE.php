<?php

	namespace Traineratwot\PDOExtended;

	use PDO;


	class PDOE extends PDO
	{
		/**
		 * PostgreSQL
		 * <img src="https://wiki.postgresql.org/images/3/30/PostgreSQL_logo.3colors.120x120.png" width="50" height="50" />
		 */
		public const PostgreSQL = 'pgsql';
		/**
		 * SQLite
		 * <img src="https://cdn.icon-icons.com/icons2/2699/PNG/512/sqlite_logo_icon_169724.png" width="50" height="50" />
		 */
		public const SQLite = 'sqlite';
		/**
		 * PostgreSQL
		 * <img src="https://img-blog.csdnimg.cn/20200828185219514.jpg?x-oss-process=image/resize,m_fixed,h_64,w_64" width="50" height="50" />
		 */
		public const MySQL = 'mysql';

		/**
		 * @var array|false
		 */
		private $query_count = 0;

		/**
		 * @var array|null
		 */
		private $dsn;

		/**
		 * @param $dsn
		 * @param $username
		 * @param $password
		 * @param $driverOptions
		 */
		public function __construct($dsn, $username = NULL, $password = NULL, $driverOptions = [])
		{
			parent::__construct($dsn, $username, $password, $driverOptions);
			$this->dsn = $this->ParseDsn($dsn, $username, $password);
			$this->setAttribute(PDO::ATTR_STATEMENT_CLASS, [PDOEStatement::class, [$this]]);
		}

		/**
		 * @param string $dsn
		 * @param string $username
		 * @param string $password
		 * @return array|null
		 */
		private function ParseDsn($dsn, $username, $password)
		{
			$this->dsn = [
				'driver'   => '',
				'user'     => '',
				'password' => '',
				'host'     => 'localhost',
				'port'     => 3306,
				'database' => '',
			];
			if ($dsn === '') {
				return $this->dsn;
			}
			$a = explode(':', $dsn);
			if ($a > 1) {
				$this->dsn['driver'] = $a[0];
			} else {
				return $this->dsn;
			}
			$b = explode(';', $a[1]);
			foreach ($b as $c) {
				$c                = explode('=', $c);
				$this->dsn[$c[0]] = $c[1];
			}
			$this->dsn['user'] = $username;
			$this->dsn['pass'] = $password;
			return $this->dsn;
		}

		/**
		 * @return array|false|int
		 */
		public function queryCount()
		{
			return $this->query_count;
		}

		/**
		 * @param string $statement SQL request
		 * @return void
		 */
		public function exec($statement)
		{
			$this->queryCountIncrement();
			parent::exec($statement); // TODO: Change the autogenerated stub
		}

		/**
		 * @return void
		 */
		public function queryCountIncrement()
		{
			$this->query_count++;
		}

		/**
		 * Проверяет существование таблицы в базе. возврящет ее правильное название с учетом регистра | FALSE
		 * @param string $table
		 * @return FALSE|string
		 */
		public function tableExists($table)
		{
			$list = $this->getAllTables();
			$find = FALSE;
			foreach ($list as $t) {
				if (mb_strtolower($t) === mb_strtolower($table)) {
					$find = TRUE;
					break;
				}
			}
			return $find ? $t : FALSE;
		}

		/**
		 * @return array
		 */
		public function getAllTables()
		{
			if ($this->dsn['driver'] === 'sqlite') {
				return $this->query("SELECT name FROM sqlite_master WHERE type='table'")->fetchAll(PDO::FETCH_COLUMN);
			}
			return $this->query("SHOW TABLES")->fetchAll(PDO::FETCH_COLUMN);
		}

		/**
		 * @param string $statement SQL request
		 * @return bool|PDOEStatement
		 */
		public function query($statement, ...$a)
		{
			$this->queryCountIncrement();
			return parent::query($statement, ...$a); // TODO: Change the autogenerated stub
		}

		/**
		 * @param string $statement SQL request
		 * @param array  $driver_options
		 * @return bool|PDOEPoolStatement
		 */
		public function poolPrepare($statement, array $driver_options = [])
		{

			$this->setAttribute(PDO::ATTR_STATEMENT_CLASS, [PDOEPoolStatement::class, [$this]]);
			return parent::prepare($statement, $driver_options);
		}

		/**
		 * @param $statement
		 * @param ...$a
		 * @return bool|PDOEStatement
		 */
		public function prepare($statement, $driver_options = NULL)
		{
			$arg = func_get_args();
			$arg = array_slice($arg, 1);
			$this->setAttribute(PDO::ATTR_STATEMENT_CLASS, [PDOEStatement::class, [$this]]);
			return parent::prepare($statement, ...$arg);
		}

		/**
		 * @param $name
		 * @return array|false|int|null
		 */
		public function __get($name)
		{
			switch ($name) {
				case 'query_count':
				case 'queryCount':
					return $this->queryCount();
			}
			return NULL;
		}

		/**
		 * @param $name
		 * @param $value
		 * @return false
		 */
		public function __set($name, $value)
		{
			return FALSE;
		}

		/**
		 * @param $name
		 * @return bool
		 */
		public function __isset($name)
		{
			return $name === 'query_count';
		}

	}

